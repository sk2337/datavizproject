[
  {
    "objectID": "viz_ge.html",
    "href": "viz_ge.html",
    "title": "Introduction",
    "section": "",
    "text": "airbnb\n\n\nExploring Washington, D.C., is a delight for many travelers, drawn by its rich history, dynamic cultural offerings, and the pulse of political life. For visitors, the choice of where to stay can significantly shape their experience. Airbnb provides a unique option beyond traditional hotels, offering stays that are often more personalized and embedded in local neighborhoods.\nThis analysis dives into what Airbnb users look for when booking their stays in Washington, D.C. We’ll examine factors like location, amenities, pricing, and host ratings to discover trends and insights that can help both hosts and guests make better-informed choices. Our goal is to shed light on the preferences of Airbnb guests and see how these vary across different areas of the city.\nIn the upcoming sections, we’ll outline our data sources and the visual tools we’ve used to unravel these patterns. This thorough exploration will equip stakeholders—ranging from hosts and guests to urban planners—with deeper insights into the dynamics of Airbnb accommodations in the capital.\n\nData Source\n\n\nCode\nimport pandas as pd\ntest = pd.read_csv(\"listings 2.csv\")\ntest.head(5)\n\n\n\n\n\n\n\n\n\nid\nlisting_url\nscrape_id\nlast_scraped\nsource\nname\ndescription\nneighborhood_overview\npicture_url\nhost_id\n...\nreview_scores_communication\nreview_scores_location\nreview_scores_value\nlicense\ninstant_bookable\ncalculated_host_listings_count\ncalculated_host_listings_count_entire_homes\ncalculated_host_listings_count_private_rooms\ncalculated_host_listings_count_shared_rooms\nreviews_per_month\n\n\n\n\n0\n3686\nhttps://www.airbnb.com/rooms/3686\n20231218032619\n2023-12-18\ncity scrape\nHome in Washington · ★4.64 · 1 bedroom · 1 bed...\nNaN\nWe love that our neighborhood is up and coming...\nhttps://a0.muscache.com/pictures/61e02c7e-3d66...\n4645\n...\n4.84\n3.91\n4.64\nNaN\nf\n1\n0\n1\n0\n0.53\n\n\n1\n3943\nhttps://www.airbnb.com/rooms/3943\n20231218032619\n2023-12-18\ncity scrape\nTownhouse in Washington · ★4.83 · 1 bedroom · ...\nNaN\nThis rowhouse is centrally located in the hear...\nhttps://a0.muscache.com/pictures/airflow/Hosti...\n5059\n...\n4.91\n4.57\n4.75\nHosted License: 5007242201001033\nf\n5\n0\n5\n0\n2.78\n\n\n2\n4197\nhttps://www.airbnb.com/rooms/4197\n20231218032619\n2023-12-18\ncity scrape\nHome in Washington · ★4.85 · 1 bedroom · 1 bed...\nNaN\nOur area, the Eastern Market neighborhood of C...\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n5061\n...\n4.98\n4.96\n4.95\nHosted License: 5007242201000749\nf\n2\n0\n2\n0\n0.33\n\n\n3\n4529\nhttps://www.airbnb.com/rooms/4529\n20231218032619\n2023-12-18\ncity scrape\nHome in Washington · ★4.66 · 1 bedroom · 1 bed...\nNaN\nVery quiet neighborhood and it is easy accessi...\nhttps://a0.muscache.com/pictures/86072003/6709...\n5803\n...\n4.93\n4.51\n4.83\nExempt\nf\n2\n0\n2\n0\n0.58\n\n\n4\n4967\nhttps://www.airbnb.com/rooms/4967\n20231218032619\n2023-12-18\nprevious scrape\nHome in Washington · ★4.74 · 1 bedroom · 1 bed...\nNaN\nNaN\nhttps://a0.muscache.com/pictures/2439810/bb320...\n7086\n...\n4.93\n4.21\n4.64\nNaN\nf\n3\n0\n3\n0\n0.19\n\n\n\n\n5 rows × 75 columns\n\n\n\nOur study is based on data from Inside Airbnb, a reputable source that provides comprehensive datasets about Airbnb listings across various cities. Specifically, we obtained detailed listing information from their Washington, D.C. dataset. This dataset includes a wealth of information on thousands of Airbnb properties in the area, covering aspects such as geographical location, pricing, amenities provided, host ratings, and much more.\nThis rich dataset allows us to perform a nuanced analysis of guest preferences and behavior patterns, providing a granular view of the factors that influence accommodation choices in Washington, D.C. By leveraging this data, we aim to generate actionable insights that can enhance the hosting experience and optimize guests’ stays in the city.\n\n\n1. What Hosts Want People to Know About Their Listings\nBefore we do any analysis, let’s take a look at how hosts describe their offerings on our platform, we’ve analyzed the ‘About’ sections from various listings. By extracting key terms and phrases from these descriptions, we’ve created a visual representation through a word cloud. This visualization highlights the most frequently mentioned features and attributes, giving us a clearer picture of what hosts believe are the most appealing aspects of their properties.\n\n\nCode\nimport pandas as pd\nimport numpy as np\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport string\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nimport nltk\n\ndf = pd.read_csv(\"cleaned_data.csv\")\n\nhost_about_text = df['host_about'].dropna()\ncombined_text = \" \".join(host_about_text)\n\n# Removing punctuation\ntranslator = str.maketrans('', '', string.punctuation)\ntext_no_punctuation = combined_text.translate(translator)\nnltk.download('stopwords')\n\n# Set of English stopwords\nstop_words = set(stopwords.words('english'))\n# Manually defining a basic set of English stopwords\n# basic_stopwords = set([\n#    \"i\", \"me\", \"my\", \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"yours\",\n#    \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\", \"she\", \"her\", \"hers\",\n#    \"herself\", \"it\", \"its\", \"itself\", \"they\", \"them\", \"their\", \"theirs\", \"themselves\",\n#    \"what\", \"which\", \"who\", \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\",\n#    \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\",\n#    \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\",\n#    \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\",\n#    \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\",\n#    \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\",\n#    \"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\",\n#    \"most\", \"other\", \"some\", \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\",\n#    \"than\", \"too\", \"very\", \"s\", \"t\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\",\"washington\",\"dc\",\"you'll\"\n#])\n\n# Remove basic stopwords\ntext_no_basic_stopwords = ' '.join([word for word in text_no_punctuation.lower().split() if word not in stop_words])\nmask = np.array(Image.open(\"comment.png\"))\n# Generate the word cloud with the simplified stopword set\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stop_words, \n                min_font_size = 10,mask=mask).generate(text_no_basic_stopwords)\n\n# Display the word cloud\nplt.figure(figsize = (7, 7), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show()\n\n\n[nltk_data] Downloading package stopwords to\n[nltk_data]     /Users/tongge/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n\n\n\n\n\n\nConclusion\nThe word cloud generated from the host descriptions really captures what’s valued most in rental listings, with “Washington DC” being a standout. For sure the hosts want people to know where they are. Also, the word “love” popping up frequently suggests that hosts really put heart into their properties, want to create a warm atmosphere.\nPhrases like “fully equipped” and “thoughtfully designed” shine through too, indicating that hosts strive to offer more than just the basics. These terms likely refer to amenities like well stocked kitchens and pleasing decor, crucial for travelers who want a “home away from home.” The mention of “travel” ties directly to the guest’s needs, hinting that hosts think about what conveniences will make travel smoother.\n\n\n\n2. Key Influencers of Airbnb Bookings: Price and Rating\nFirst, we want to explore the most import things people look at when they book airbnbs which is price and rating. To understand the landscape of Airbnb accommodations in Washington, D.C., we’ve created heat maps that visually represent the median price and average ratings across different neighborhoods. These maps offer a clear, intuitive display of how prices and guest satisfaction vary geographically throughout the city.\n\n\nCode\nimport warnings\n\n# To suppress all warnings\nwarnings.filterwarnings('ignore')\n\nimport geopandas as gpd\nimport plotly.express as px\nimport json\nimport matplotlib.pyplot as plt\n\n\n\ndc_bound = gpd.read_file(\"neighbourhoods.geojson\")\ndf = pd.read_csv(\"cleaned_data.csv\")\n\n# get average rating\nspecified_review_score_columns = [\n    'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness',\n    'review_scores_checkin', 'review_scores_communication', 'review_scores_location',\n    'review_scores_value'\n]\n\n# Calculate the average review score across the specified columns\ndf['average_review_score'] = df[specified_review_score_columns].mean(axis=1)\n\n# create a new data frame\nneighbourhood_data = df.groupby('neighbourhood_cleansed').agg({\n    'price_num': 'median',\n    'average_review_score':'mean'\n}).reset_index()\nneighbourhood_data['neighbourhood_cleansed'] = neighbourhood_data['neighbourhood_cleansed'].str.split(',').str[0]\n\ndc_bound['neighbourhood_cleansed'] = dc_bound['neighbourhood']\n\ndc_bound['neighbourhood_cleansed'] = dc_bound['neighbourhood_cleansed'].str.split(',').str[0]\nmerged_gdf = dc_bound.merge(neighbourhood_data, on='neighbourhood_cleansed', how='right')\nmerged_gdf['neighbourhood_cleansed'] = merged_gdf['neighbourhood_cleansed'].str.split(',').str[0]\ngeojson_dict = json.loads(dc_bound.to_json())\n\n\n\nHeat Map for median Airbnb Price and average Review by Neighborhood in DC\n\n\nCode\nimport plotly.graph_objects as go\n\n# Assuming 'merged_gdf' and 'geojson_dict' are already defined as shown in previous steps.\n\n# Create base figure with map settings\nfig = go.Figure(go.Choroplethmapbox(\n    geojson=geojson_dict,\n    locations=merged_gdf['neighbourhood_cleansed'],  \n    featureidkey='properties.neighbourhood_cleansed',  \n    z=merged_gdf['average_review_score'],  # initial z values, can be changed by dropdown\n    colorscale=\"viridis\",\n    marker_opacity=0.5,\n    marker_line_width=0,\n    hoverinfo='all'\n))\n\n\nfig.update_layout(\n    mapbox_style=\"carto-positron\",\n    mapbox_zoom=10,\n    mapbox_center={\"lat\": 38.9, \"lon\": -77.03},\n    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n    title='Average Airbnb Metrics by Neighborhood in DC'\n)\n\nfig.update_layout(\n    hoverlabel=dict(\n        font=dict(\n            family=\"Courier New, monospace\",\n            size=12\n        ),\n        bordercolor='pink',\n        bgcolor='white'\n    ),\n    clickmode='event+select'\n)\n\n#  dropdown buttons\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=[\n                dict(label=\"Average Review Score\",\n                     method=\"update\",\n                     args=[{\"z\": [merged_gdf['average_review_score']]},\n                           {\"title\": \"Average Airbnb Review Score by Neighborhood in DC\"}]),\n                dict(label=\"Median Price\",\n                     method=\"update\",\n                     args=[{\"z\": [merged_gdf['price_num']]},\n                           {\"title\": \"Median Airbnb Price by Neighborhood in DC\"}]),\n            ],\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.9,\n            xanchor=\"left\",\n            y=1.1,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\nfig.update_traces(\n    hovertemplate=(\n        \"&lt;b&gt;%{location}&lt;/b&gt;&lt;br&gt;\" +\n        \"&lt;span style='font-size:0.9em;'&gt;Value:&lt;/span&gt; \" +\n        \"&lt;span style='font-size:0.9em;'&gt;&lt;b&gt;%{z:.2f}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;\"\n    )\n)\n\nfig.show()\n\n\n\n                                                \n\n\n\nConclusion\nIn this heatmap visualization of Airbnb listings across Washington D.C., it is observed that the median prices are generally moderate, indicating that most parts of the city offer reasonably priced accommodations. This trend suggests that staying in D.C. can be accessible for a variety of budget levels. Moreover, the average review scores appear to be higher in the northern regions of the city compared to the southern parts. This could indicate a higher satisfaction level or possibly different standards in guest expectations or property offerings in these areas.\nThis conclusion provides a quick summary and interpretation of the spatial distribution and variations in price and review scores across different neighborhoods in Washington D.C., based on the data visualized in the heatmap.\n\n\n\nOptimal Airbnb Booking Locations Based on Custom Preferences\nIn this analysis, we calculate a composite score for each neighborhood in Washington D.C. by combining the median price and average rating of Airbnb listings. This score is tailored according to user defined weights, allowing for personalized decision making based on individual preferences for cost versus quality. The higher the score, the more favorable the neighborhood is for booking, according to the specified preferences.\n\n\nCode\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Prepare the data\nprice = merged_gdf['price_num'].values.reshape(-1, 1)  # Reshaping for scaler\nscore = merged_gdf['average_review_score'].values.reshape(-1, 1)\n\nscaler = MinMaxScaler()\n\n# Normalize the data\nmerged_gdf['normalized_price'] = scaler.fit_transform(price)\nmerged_gdf['normalized_score'] = scaler.fit_transform(score)\n\n# Update score calculation to use normalized values\nmerged_gdf['score'] = (merged_gdf['normalized_price'] * 0.5 + merged_gdf['normalized_score'] * 0.5)\n\n# Create base figure with map settings\nfig = go.Figure(go.Choroplethmapbox(\n    geojson=geojson_dict,\n    locations=merged_gdf['neighbourhood_cleansed'],\n    featureidkey='properties.neighbourhood_cleansed',\n    z=merged_gdf['score'],  \n    colorscale=\"viridis\",\n    marker_opacity=0.5,\n    marker_line_width=0,\n    hoverinfo='all'\n))\n\nfig.update_layout(\n    mapbox_style=\"carto-positron\",\n    mapbox_zoom=10,\n    mapbox_center={\"lat\": 38.9, \"lon\": -77.03},\n    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n    title='Dynamic Score by Neighborhood in DC based on Weighted Ratios of Price and Review'\n)\n\nfig.update_layout(\n    hoverlabel=dict(\n        font=dict(\n            family=\"Courier New, monospace\",\n            size=12\n        ),\n        bordercolor='pink',\n        bgcolor='white'\n    ),\n    clickmode='event+select'\n)\n\n# Slider for weight adjustments\nsliders = [\n    dict(\n        active=50,\n        currentvalue={\"prefix\": \"Weight of Price \"},\n        pad={\"t\": 50},\n        steps=[\n            dict(method='restyle',\n                 args=[\n                     {'z': [(merged_gdf['normalized_price'] * k * 0.01) + (merged_gdf['normalized_score'] * (1 - k * 0.01)) if merged_gdf['normalized_score'].iloc[i] * (1 - k * 0.01) != 0 else 0 for i in range(len(merged_gdf))]}\n                 ],\n                 label=f\"{k * 0.01:.2f}\") for k in range(100)\n        ]\n    )\n]\n\nfig.update_layout(sliders=sliders)\n\nfig.update_traces(\n    hovertemplate=(\n        \"&lt;b&gt;%{location}&lt;/b&gt;&lt;br&gt;\" +\n        \"&lt;span style='font-size:0.9em;'&gt;Score:&lt;/span&gt; \" +\n        \"&lt;span style='font-size:0.9em;'&gt;&lt;b&gt;%{z:.2f}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;\"\n    )\n)\n\nfig.show()\n\n\n\n                                                \n\n\n\nConclusion\nBased on the user defined criteria, neighborhoods with the highest scores are recommended for Airbnb bookings. This personalized approach helps in making informed decisions, balancing between cost efficiency and guest satisfaction. Users can fine-tune their preferences to find areas that best meet their needs, whether they are looking for the most affordable options or the highest-rated properties.\n\n\nAddition(Average Rating for each host in each area)\n\n\nCode\nimport plotly.graph_objects as go\nimport pandas as pd\ndf['neighbourhood_cleansed'] = df['neighbourhood_cleansed'].str.split(',').str[0]\n\ndef create_figure():\n    neighborhoods = df['neighbourhood_cleansed'].unique()\n    \n    fig = go.Figure()\n    \n    for neighbourhood in neighborhoods:\n        data = df[df['neighbourhood_cleansed'] == neighbourhood]\n        average_rating_by_host = data.groupby('host_name')['average_review_score'].mean().sort_values(ascending=False).head(20)\n        \n        fig.add_trace(\n            go.Bar(\n                x=average_rating_by_host.values,\n                y=average_rating_by_host.index,\n                orientation='h',\n                name=neighbourhood,\n                visible=(neighbourhood == neighborhoods[0]) \n            )\n        )\n    \n    dropdown_buttons = [\n        {\n            'label': neighbourhood,\n            'method': 'update',\n            'args': [\n                {'visible': [neighbourhood == n for n in neighborhoods]},\n                {'title': f'Review Score by Host in {neighbourhood}'}\n            ]\n        } for neighbourhood in neighborhoods\n    ]\n    \n    fig.update_layout(\n        updatemenus=[{\n            'buttons': dropdown_buttons,\n            'direction': 'down',\n            'showactive': True,\n            'x': 0.9,\n            'xanchor': 'center',\n            'y': 1.5,\n            'yanchor': 'top'\n        }],\n        title=f'Review Score by Host in {neighborhoods[0]}',\n        xaxis_title='Average Review Score',\n        yaxis_title='Host',\n        template='plotly_white' ,\n        height=700 \n    )\n    \n    return fig\n\nfig = create_figure()\nfig.show()\n\n\n\n                                                \n\n\n\n\nCode\nimport ipywidgets as widgets\nimport seaborn as sns\n# Top 20\n\n#def plot_neighbourhood(neighbourhood):\n#    data = df[df['neighbourhood_cleansed'] == neighbourhood]\n #   average_rating_by_host = data.groupby('host_name')['average_review_score'].mean().sort_values(ascending=False).head(20)\n    \n #   plt.figure()\n #   sns.barplot(x=average_rating_by_host.values, #y=average_rating_by_host.index, palette='viridis')\n #   plt.title(f'Review Score by Host in {neighbourhood}',fontsize = 18)\n #   plt.xlabel('Average Review Score',fontsize = 14)\n #   plt.ylabel('Host',fontsize = 14)\n #   plt.show()\n\n# Dropdown menu for selecting the neighbourhood\n#neighbourhoods = df['neighbourhood_cleansed'].unique()\n\n#widgets.interact(plot_neighbourhood, neighbourhood=widgets.Dropdown(options=neighbourhoods, description=\"Area:\")\n#                 ,layout={'width': '50%'},style={'description_width': 'initial'},   )\n\n\n\n\n\nConclusion\nAfter thoroughly examining the price and rating landscape in Washington, D.C., we’ve successfully developed a comprehensive tool to aid users in selecting the most suitable area for booking an Airbnb. Additionally, we’ve enhanced this tool by incorporating a bar plot highlighting the top-rated hosts within each selected area. However, our commitment to providing unparalleled guidance goes further. We aim to delve deeper into the intricate relationships between the number of bathrooms, accommodates, popularity density, and the distance from DC’s most beloved tourist attractions. By analyzing these factors, we can offer tailored recommendations, ensuring guests make informed decisions on where to book their Airbnb in Washington, D.C\n\n\n\n3. Relationship Between Bathroom Numbers and Accommodation Capacities in Airbnb\nWe wanted to see what factors were most influential in determining the airbnb prices. As price is an important factor for both customers and hosts, we wanted to take a look at the price as the dependent variable. Also, when thinking of the supply and demand curve, we thought that a higher demand would imply a higher price, and thus we looked at the relationship between price and other factors.\n\nNumber of Bathrooms:\n\nThe number of bathrooms in an Airbnb property is often considered an important factor affecting its price.\nWe investigated how the price varies with the number of bathrooms to understand its influence on pricing dynamics.\n\nAccommodates Capacity:\n\nAnother significant factor influencing Airbnb prices is the number of people the property can accommodate.\n\nWe examined the relationship between the accommodation capacity and the price to discern its impact on pricing trends.\n\n\n\n\nCode\nneighbourhoods_1 = gpd.read_file(\"neighbourhoods.geojson\")\nneighbourhoods_1['neighbourhood_cleansed'] = neighbourhoods_1['neighbourhood']\ndf_1 = pd.read_csv(\"cleaned_data.csv\")\npd.set_option('display.max_columns', None)\n\nQ1 = df_1['price_num'].quantile(0.25)\nQ3 = df_1['price_num'].quantile(0.75)\nIQR = Q3 - Q1\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\ndf_1 = df_1[(df_1['price_num'] &lt;= upper_bound) & (df_1['price_num'] &gt;= lower_bound)]\n\nneighbourhoods_1['neighbourhood_cleansed'] = neighbourhoods_1['neighbourhood']\ndf_1['median_price'] = df_1.groupby('neighbourhood_cleansed')['price_num'].transform('median')\ndf_1['median_location_review'] = df_1.groupby('neighbourhood_cleansed')['review_scores_location'].transform('median')\n#merged_gdf = neighbourhoods_1.merge(df_1, on='neighbourhood_cleansed', how='right')\n\n\n\n\nCode\ndf_1['bathroom_num'] = df_1['bathrooms_text'].str.extract(r'(\\d+)', expand=False)\ndf_1['bathroom_num'] = pd.to_numeric(df_1['bathroom_num'])\n\nfig = px.box(df_1, x='bathroom_num', y='price_num')\nmedian_df = df_1.groupby('bathroom_num')['price_num'].median().reset_index()\n\nfig.add_trace(px.line(median_df, x='bathroom_num', y='price_num').data[0])\nfig.data[-1].line.color = 'red'\nfig.update_xaxes(title_text='Number of Bathrooms')\nfig.update_yaxes(title_text='Price')\nfig.update_layout(title='Price of Airbnbs by the Number of Bathrooms with Median Line')\nfig.show()\n\n\n\n                                                \n\n\n\n\nCode\nfig = px.box(df_1, x='accommodates', y='price_num')\n\nmedian_df = df_1.groupby('accommodates')['price_num'].median().reset_index()\nfig.add_trace(px.line(median_df, x='accommodates', y='price_num').data[0])\nfig.data[-1].line.color = 'red'\nfig.update_xaxes(title_text='Number of Accommodates Possible')\nfig.update_yaxes(title_text='Price')\nfig.update_layout(title='Price of Airbnbs by the Number of Accommodates with Median Line')\n\nfig.show()\n\n\n\n                                                \n\n\n\nConclusion\nIn our analysis, we discovered that both the number of bathrooms and the accommodation capacity significantly impact Airbnb prices. Surprisingly, having more than 2-3 bathrooms or accommodating more than 8 people did not correlate with higher prices. This intriguing finding suggests that travelers seeking accommodations for larger groups can explore listings with higher accommodation capacities without facing a significant increase in cost. By doing so, travelers can enjoy the comfort and spaciousness of larger properties while staying within their budgetary constraints.\n\n\n\n4. Airbnb Prices and Distance from the National Monument\nWashington D.C. is renowned for its iconic landmarks, with the National Monument being a centerpiece of the city’s attractions. To delve into the potential influence of proximity to this symbol on Airbnb pricing, we integrated a novel feature: the distance from the National Monument for each Airbnb listing. Our analysis aims to find any correlations between distance from this historical site and pricing trends in the D.C. Airbnb market.\nAnd Moving forward, we will focus our analysis specifically on the top ten neighborhoods that are most frequently booked within a 60-day window.\n\n\nCode\nneighbourhood_taken_60_sum_1 = df_1.groupby('neighbourhood_cleansed')['taken_60'].sum().sort_values(ascending=False)\n\ntop_ten_neb = neighbourhood_taken_60_sum_1.head(10)\nnames_only_1 = top_ten_neb.index\ntop_nenb = list(names_only_1)\ndf_withtop_10_1 = df_1[df_1['neighbourhood_cleansed'].isin(top_nenb)]\n\n\n\n\nCode\nimport math\n\ndef haversine(lon1, lat1, lon2, lat2):\n    \"\"\"\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # Convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # Haversine formula\n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a)) \n    # Radius of earth in miles\n    radius = 3956\n    distance = radius * c\n    return distance\n\ntarget_latitude = 38.8895\ntarget_longitude = -77.0353\n\n\n# Calculate distance from target point to each point in the DataFrame\ndf_withtop_10_1['Distance_miles'] = df_withtop_10_1.apply(lambda row: haversine(row['longitude'], row['latitude'], target_longitude, target_latitude), axis=1)\n\n\n\n\nCode\nimport statsmodels.api as sm\n\n# Fit a linear regression model\nX = df_withtop_10_1['Distance_miles']\ny = df_withtop_10_1['price_num']\nX = sm.add_constant(X)\nmodel = sm.OLS(y, X).fit()\npredictions = model.predict(X)\n\n# Create an interactive scatter plot with tooltips\nfig = px.scatter(df_withtop_10_1, x='Distance_miles', y='price_num', color='neighbourhood_cleansed', \n                 hover_data={'Distance_miles': True, 'price_num': True, 'neighbourhood_cleansed': True},\n                 labels={\"neighbourhood_cleansed\":\"Neighbourhood\"})\n\n# Update layout to customize the tooltip display\nfig.update_traces(marker=dict(size=3),\n                  selector=dict(mode='markers'))\nfig.add_trace(px.line(x=df_withtop_10_1['Distance_miles'], y=predictions, title='Overall Trend').data[0])\nfig.data[-1].line.color = 'black'\nfig.update_xaxes(title_text='Distance from the National Monument (Miles)')\nfig.update_yaxes(title_text='Price')\nfig.update_layout(legend=dict(itemwidth=30,font=dict(size=5)),\n                  title='Price of Airbnbs by How Far the Airbnbs are from the National Monument')\n\n# Show the plot\nfig.show()\n\n\n\n                                                \n\n\n\nConclusion\nOur analysis showed a clear trend: as the distance from the Washington Monument increases, average Airbnb prices generally decrease. This indicates that being closer to this landmark might have a notable influence on rental pricing. We illustrated this relationship with a single plot that combined data from all neighborhoods, clearly displaying a price threshold for each distance category from the monument.\nAs a tourist, keep in mind that if you prefer to be close to popular attractions, you might encounter higher prices. However, if you’re on a tight budget, it’s advisable to steer clear of the central areas of Washington, D.C.\n\n\n\n5. Population Density in Top Booked Neighborhoods\nUnderstanding population density can provide insights into the liveliness and accessibility of different areas within a city. In this analysis, we examine population density across various wards in Washington D.C., focusing on the top ten neighborhoods most frequently booked within a 60 days period.\n\n\nCode\n# df with only the top ten\n\nneighbourhood_taken_60_sum = df.groupby('neighbourhood_cleansed')['taken_60'].sum().sort_values(ascending=False)\n\ntop_ten_neighbourhoods = neighbourhood_taken_60_sum.head(10)\nnames_only = top_ten_neighbourhoods.index\ntop_neighbourhoods = list(names_only)\ndf_withtop_10 = df[df['neighbourhood_cleansed'].isin(top_neighbourhoods)]\n\n\n# Grouping data by 'neighbourhood_cleansed' and calculating mean for price, latitude, and longitude\n\ndata_for_pop = df_withtop_10.groupby('neighbourhood_cleansed').agg({\n    'price_num': 'median',\n    'latitude': 'mean',\n    'longitude': 'mean'\n}).reset_index()\n\ndc_wards = gpd.read_file(\"ACS_Demographic_Characteristics_DC_Ward.geojson\")[\n    [\"NAMELSAD\", \"DP05_0001E\", \"geometry\"]\n]\n\n\n\n\nCode\nimport pandas as pd\nimport folium\nimport json\nfrom folium import Icon\nimport matplotlib.pyplot as plt\n\ndc_wards['Population_Density'] = dc_wards['DP05_0001E'] / dc_wards.geometry.area\nm = folium.Map(location=[38.9072, -77.0369], zoom_start=12, tiles='cartodbpositron')  # Changed tiles here\n\nchoropleth = folium.Choropleth(\n    geo_data=dc_wards,\n    data=dc_wards,\n    columns=['NAMELSAD', 'Population_Density'],\n    key_on='feature.properties.NAMELSAD',\n    fill_color='YlGn',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Population Density in DC'\n).add_to(m)\n\nneighbourhood_data = df_withtop_10.groupby('neighbourhood_cleansed').agg({\n    'price_num': 'median',\n    'average_review_score':'mean',\n    'latitude': 'mean',\n    'longitude': 'mean'\n}).reset_index()\n\n\nfor index, row in neighbourhood_data.iterrows():\n    popup_html = f\"\"\"\n    &lt;div style=\"width:200px;\"&gt;\n        &lt;strong&gt;{row['neighbourhood_cleansed']}&lt;/strong&gt;&lt;br&gt;\n        Average price: ${round(row['price_num'], 2)}&lt;br&gt;\n        Average rating: {round(row['average_review_score'], 2)}\n    &lt;/div&gt;\n    \"\"\"\n    folium.Marker(\n        [row['latitude'], row['longitude']],\n        popup=folium.Popup(popup_html, max_width=265),\n        tooltip=row['neighbourhood_cleansed'],\n        icon=Icon(color='blue', icon='info-sign')\n    ).add_to(m)\n\n# Display the map\nm\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nConclusion\nOur analysis suggests that areas with higher population density, typically located in the center of D.C., are more likely to attract Airbnb bookings. This trend could be attributed to the abundance of local amenities and better connectivity in densely populated regions. However, it’s essential to note that while these central areas may be desirable for their accessibility, they also tend to have higher prices, as evidenced by our previous analyses.\nInterestingly, our examination of the top booked neighborhoods reveals four distinct areas with lower prices compared to the center of D.C. This indicates that while population density plays a role in booking frequency, other factors such as pricing can influence traveler preferences. As such, travelers may consider these alternative neighborhoods to find accommodations that offer both affordability and convenience.\n\n\n\nFinal Decision Making: Finding the Perfect Airbnb\nAfter analyzing various factors influencing Airbnb preferences, we’re equipped with valuable insights to guide our final decision-making process. In this concluding section, we present a comprehensive visualization that encapsulates the ideal Airbnb options, tailored to meet diverse traveler needs.\nBased on our past analyses, we’ve identified a few key factors that play a significant role in shaping Airbnb preference:\n\nPrice: Affordability remains a crucial consideration for travelers seeking value for their money.\nRating: The overall satisfaction of previous guests, reflected in review scores, serves as a reliable indicator of accommodation quality.\nAmenities: Factors such as the number of bathrooms and accommodates contribute to the comfort and convenience of a stay.\n\nLocation: Proximity to landmarks, such as the National Monument, and population density offer insights into neighborhood vibrancy and accessibility.\n\nWe’ve picked out a selection of Airbnb listings that best align with our criteria, filtering for accommodations that offer competitive pricing, high ratings, ample amenities, and favorable locations.\n\n\nCode\ntemp = df_1.reset_index()\n\n\n\n\nCode\nindex = []\nunique_neigh = temp['neighbourhood_cleansed'].unique()\nfor i in unique_neigh:\n    tem = temp[temp['neighbourhood_cleansed'] == i]\n    avg_rev = tem.groupby(['neighbourhood_cleansed'])['review_scores_location'].mean().values[0]\n    avg_price = tem.groupby(['neighbourhood_cleansed'])['price_num'].mean().values[0]\n    avg_bath = tem.groupby(['neighbourhood_cleansed'])['bathroom_num'].mean().values[0]\n\n    tem = tem[(tem['review_scores_location'] &gt; avg_rev) & (tem['price_num'] &lt; avg_price) &(tem['bathroom_num'] &gt; avg_bath)]\n\n    index.extend(tem['index'])\n\n\n\n\nCode\ncuration = temp[temp['index'].isin(index)]\n\n\n\n\nCode\nneighbourhood_data = df.groupby('neighbourhood_cleansed').agg({\n    'price_num': 'median',\n    'review_scores_location':'mean'\n}).reset_index()\n# Read the data\ndc_wards = gpd.read_file(\"neighbourhoods.geojson\")\ndc_wards['color'] = 1\ndc_wards['neighbourhood_cleansed'] = dc_wards['neighbourhood']\nneighbourhood_price = temp.groupby(['neighbourhood_cleansed'])['price_num'].mean().reset_index()\ntest = pd.merge(dc_wards,neighbourhood_price,on='neighbourhood_cleansed')\n\n\n\n\nCode\nimport pandas as pd\nimport folium\nimport json\nfrom folium import Icon\nm = folium.Map(location=[38.9072, -77.0369], zoom_start=12, tiles='cartodbpositron')  # Changed tiles here\n\nchoropleth = folium.Choropleth(\n    geo_data=test,\n    data=test,\n    columns=['neighbourhood_cleansed','price_num'],\n    key_on='feature.properties.neighbourhood',\n    fill_color='YlGn',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Population Density in DC'\n).add_to(m)\n\n\nfor index, row in curation.iterrows():\n    popup_html = f\"\"\"\n    &lt;div style=\"width:200px;\"&gt;\n        &lt;strong&gt;{row['neighbourhood_cleansed']}&lt;/strong&gt;&lt;br&gt;\n        Average price: ${round(row['price_num'], 2)}&lt;br&gt;\n        Average rating: {round(row['review_scores_location'], 2)}\n    &lt;/div&gt;\n    \"\"\"\n    tooltip_html = f\"\"\"\n    &lt;div style=\"width:200px;\"&gt;\n        &lt;strong&gt;{row['neighbourhood_cleansed']}&lt;/strong&gt;&lt;br&gt;\n        Bathrooms: {row['bathroom_num']}&lt;br&gt;\n        Price: ${round(row['price_num'], 2)}&lt;br&gt;\n        Review Score: {row['review_scores_location']}\n    &lt;/div&gt;\n    \"\"\"\n    folium.Marker(\n        [row['latitude'], row['longitude']],\n        popup=folium.Popup(popup_html, max_width=265),\n        tooltip=tooltip_html,  # Modified tooltip content\n        icon=Icon(color='blue', icon='info-sign')\n    ).add_to(m)\n\n\n# Display the map\nm\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nCheck out the “Factor Analysis” tab for more interesting insights!\n\n\n\n\n Back to top"
  },
  {
    "objectID": "compare.html",
    "href": "compare.html",
    "title": "Factore analysis",
    "section": "",
    "text": "Room type and price/rating\n\n\nCode\nimport warnings\n\n# To suppress all warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport geopandas as gpd\nimport plotly.express as px\nimport json\nimport matplotlib.pyplot as plt\n\n\n\ndc_bound = gpd.read_file(\"neighbourhoods.geojson\")\ndf = pd.read_csv(\"cleaned_data.csv\")\n\n# get average rating\nspecified_review_score_columns = [\n    'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness',\n    'review_scores_checkin', 'review_scores_communication', 'review_scores_location',\n    'review_scores_value'\n]\n\n# Calculate the average review score across the specified columns\ndf['average_review_score'] = df[specified_review_score_columns].mean(axis=1)\n\n\n\n\nCode\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom ipywidgets import interact, Dropdown\n\n# Compute metrics\nmedian_price_per_room_type = df.groupby('room_type')['price_num'].median().reset_index()\naverage_review_per_room_type = df.groupby('room_type')['average_review_score'].mean().reset_index()\n\ndef create_plot(metric):\n    if metric == 'Median Price':\n        data = median_price_per_room_type\n        y = 'price_num'\n        title = 'Median Price by Room Type'\n        ylabel = 'Median Price ($)'\n    else:\n        data = average_review_per_room_type\n        y = 'average_review_score'\n        title = 'Average Review Score by Room Type'\n        ylabel = 'Average Rating'\n\n    # Assigning a unique color to each room type\n    colors = ['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A', '#19D3F3', '#FF6692', '#B6E880', '#FF97FF', '#FECB52']\n\n    fig = go.Figure(data=[go.Bar(\n        x=data['room_type'],\n        y=data[y],\n        marker_color=colors[:len(data)],  # Limiting color list to number of room types\n        text=[f'{val:.2f}' for val in data[y]],\n        textposition='auto'\n    )])\n\n    fig.update_layout(\n        title=title,\n        xaxis_title=\"Room Type\",\n        yaxis_title=ylabel,\n        plot_bgcolor='rgb(230, 230,230)',\n        showlegend=False\n    )\n    fig.show()\n\n# Dropdown widget for selecting the metric\nmetric_dropdown = Dropdown(\n    options=['Median Price', 'Average Review Score'],\n    value='Median Price',\n    description='Metric:',\n    disabled=False,\n)\n\n# Display interactive widget\ninteract(create_plot, metric=metric_dropdown)\n\n\n\n\n\n&lt;function __main__.create_plot(metric)&gt;\n\n\n\n\nCode\nimport ipywidgets as widgets\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nmedian_price_per_room_type = df.groupby('room_type')['price_num'].median().reset_index()\naverage_review_per_room_type = df.groupby('room_type')['average_review_score'].mean().reset_index()\n\ndef plot_data(metric):\n    plt.figure(figsize=(8, 6))\n    if metric == 'Median Price':\n        barplot = sns.barplot(x='room_type', y='price_num', data=median_price_per_room_type, palette='coolwarm')\n        for p in barplot.patches:\n            barplot.annotate(format(p.get_height(), '.2f'), \n                             (p.get_x() + p.get_width() / 2., p.get_height()), \n                             ha = 'center', va = 'center', \n                             xytext = (0, 9), \n                             textcoords = 'offset points')\n        plt.ylabel('Median Price ($)',fontsize = 14)\n    else:\n        barplot_rat = sns.barplot(x='room_type', y='average_review_score', data=average_review_per_room_type, palette='viridis')\n        for p_r in barplot_rat.patches:\n            barplot_rat.annotate(format(p_r.get_height(), '.2f'), \n                                 (p_r.get_x() + p_r.get_width() / 2., p_r.get_height()), \n                                 ha = 'center', va = 'center', \n                                 xytext = (0, 9), \n                                 textcoords = 'offset points')\n        plt.ylabel('Average Rating',fontsize = 14)\n    \n    plt.title(f'{metric} by Room Type')\n    plt.xlabel('Room Type',fontsize = 14)\n    plt.grid(True, axis='y')\n    plt.show()\n\ndropdown = widgets.Dropdown(\n    options=['Median Price', 'Average Review Score'],\n    value='Median Price',\n    description='Select one:',\n    style={'description_width': 'initial'},  \n    layout={'width': '50%'} \n)\n\nwidgets.interact(plot_data, metric=dropdown)\n\n\n\n\n\n&lt;function __main__.plot_data(metric)&gt;\n\n\n\n\nThe relationship betwwen price and reviews\n\n\nCode\nQ1 = df['price_num'].quantile(0.25)\nQ3 = df['price_num'].quantile(0.75)\nIQR = Q3 - Q1\n\nupper_limit = Q3 + 1.5 * IQR\ndf_without_outlines = df[df['price_num'] &lt;= upper_limit]\n\nbins = [0, 50, 100, 150, 200, 250, 300]\nlabels = ['0-50', '50-100', '100-150', '150-200', '200-250', '250-300']\ndf_without_outlines['price_range'] = pd.cut(df_without_outlines['price_num'], bins=bins, labels=labels, right=False)\n\naverage_rating_by_price_range = df_without_outlines.groupby('price_range')['average_review_score'].mean().reset_index()\n\ndef plot_relation(metric):\n    plt.figure(figsize=(8, 6))\n    if metric == 'Relationship between Price and Average Review Score':\n        sns.regplot(x='price_num', y='average_review_score', data=df_without_outlines, scatter_kws={'alpha':0.5},color=\"pink\", line_kws={'color': 'lightblue'})\n        plt.title('Relationship between Price and Average Review Score (Without Outliers)',fontsize=18)\n        plt.xlabel('Price ($)',fontsize=14)\n        plt.ylabel('Average Review Score',fontsize=14)\n    else:\n        sns.barplot(x='price_range', y='average_review_score', data=average_rating_by_price_range, palette='viridis')\n        plt.title('Average Review Score by Price Range',fontsize=18)\n        plt.xlabel('Price Range ($)',fontsize=14)\n        plt.ylabel('Average Review Score',fontsize=14)\n    \n    plt.grid(True, axis='y')\n    plt.show()\n\ndropdown = widgets.Dropdown(\n    options=['Relationship between Price and Average Review Score', 'Average Review Score by Price Range'],\n    description='Select one:',\n    style={'description_width': 'initial'},  \n    layout={'width': '50%'} \n)\n\nwidgets.interact(plot_relation, metric=dropdown)\n\n\n\n\n\n&lt;function __main__.plot_relation(metric)&gt;\n\n\n\n\nthe hosts have most/least airbnbs , number of reviews and the review scores\n\n\nCode\ndef plot_graph(graph_type):\n    plt.figure(figsize=(8, 6))\n    if graph_type == 'Host Listings vs. Rating':\n        sns.regplot(x='calculated_host_listings_count', y='average_review_score', data=df, color=\"pink\",\n                    scatter_kws={'alpha':0.6}, line_kws={'color': 'lightblue'})\n        plt.title(\"Relationship between Host's Airbnb Number and Average Rating (Modified)\", fontsize=18)\n        plt.xlabel('Number of Listings (Host\\'s Airbnb Number)', fontsize=14)\n        plt.ylabel('Average Review Score', fontsize=14)\n    elif graph_type == 'Number of Reviews vs. Review Scores':\n        sns.regplot(x='number_of_reviews', y='review_scores_rating', data=df, color=\"pink\",\n                    scatter_kws={'alpha':0.9}, line_kws={'color': 'lightblue'})\n        plt.title('Relationship between Number of Reviews and Review Scores', fontsize=18)\n        plt.xlabel('Number of Reviews', fontsize=14)\n        plt.ylabel('Review Scores Rating', fontsize=14)\n    plt.grid(True)\n    plt.show()\n\n# Dropdown menu for selecting the plot\ndropdown = widgets.Dropdown(\n    options=['Host Listings vs. Rating', 'Number of Reviews vs. Review Scores'],\n    value='Host Listings vs. Rating',\n    description='Select Plot:',\n    disabled=False,\n)\n\nwidgets.interact(plot_graph, graph_type=dropdown)\n\n\n\n\n\n&lt;function __main__.plot_graph(graph_type)&gt;\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Factor analysis",
    "section": "",
    "text": "Room type and price/rating\nThe first analysis explores the relationship between the type of room offered on Airbnb and two key metrics: price and rating. This helps to understand which room types are more expensive and which ones tend to receive higher ratings from guests. By analyzing the median prices and average review scores across different room types, we can gain insights into guest preferences and pricing strategies\n\n\nCode\nimport warnings\n\n# To suppress all warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport geopandas as gpd\nimport plotly.express as px\nimport json\nimport matplotlib.pyplot as plt\n\n\n\ndc_bound = gpd.read_file(\"neighbourhoods.geojson\")\ndf = pd.read_csv(\"cleaned_data.csv\")\n\n# get average rating\nspecified_review_score_columns = [\n    'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness',\n    'review_scores_checkin', 'review_scores_communication', 'review_scores_location',\n    'review_scores_value'\n]\n\ndf['average_review_score'] = df[specified_review_score_columns].mean(axis=1)\n\n\n\n\nCode\nimport ipywidgets as widgets\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming 'df' is your DataFrame containing the data\nmedian_price_per_room_type = df.groupby('room_type')['price_num'].median().reset_index()\naverage_review_per_room_type = df.groupby('room_type')['average_review_score'].mean().reset_index()\n\ndef plot_median_price():\n    plt.figure(figsize=(7, 5))\n    barplot = sns.barplot(x='room_type', y='price_num', data=median_price_per_room_type, palette='coolwarm')\n    for p in barplot.patches:\n        barplot.annotate(format(p.get_height(), '.2f'), \n                         (p.get_x() + p.get_width() / 2., p.get_height()), \n                         ha='center', va='center', \n                         xytext=(0, 9), \n                         textcoords='offset points')\n    plt.title('Median Price by Room Type')\n    plt.ylabel('Median Price ($)', fontsize=14)\n    plt.xlabel('Room Type', fontsize=14)\n    plt.grid(True, axis='y')\n    plt.show()\n\ndef plot_average_review_score():\n    plt.figure(figsize=(7, 5))\n    barplot_rat = sns.barplot(x='room_type', y='average_review_score', data=average_review_per_room_type, palette='viridis')\n    for p in barplot_rat.patches:\n        barplot_rat.annotate(format(p.get_height(), '.2f'), \n                             (p.get_x() + p.get_width() / 2., p.get_height()), \n                             ha='center', va='center', \n                             xytext=(0, 9), \n                             textcoords='offset points')\n    plt.title('Average Review Score by Room Type')\n    plt.ylabel('Average Rating', fontsize=14)\n    plt.xlabel('Room Type', fontsize=14)\n    plt.grid(True, axis='y')\n    plt.show()\n\n# Call the functions to display the plots\nplot_median_price()\nplot_average_review_score()\n\n\n\n\n\n\n\n\nFrom the plots, it becomes evident that different room types cater to various guest expectations and budget ranges. Here’s a summary of the findings:\n\nEntire House: Median Price: $132, Average Rating: 4.79\nHotel Room: Median Price: $29, Average Rating: 4.59\nPrivate Room: Median Price: $132, Average Rating: 4.72\nShared Room: Median Price: $132, Average Rating: 4.59\n\nThese results indicate that Entire Houses and Private Rooms command higher prices and tend to be rated more favorably, suggesting a preference for privacy among guests.\n\n\nThe Relationship Betwwen Price and Reviews\nThis analysis seeks to understand how pricing influences guest satisfaction as measured by review scores. By examining the relationship between price and average review scores, both through scatter plots and categorized price ranges, we can identify pricing strategies that maximize guest satisfaction.\n\n\nCode\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nQ1 = df['price_num'].quantile(0.25)\nQ3 = df['price_num'].quantile(0.75)\nIQR = Q3 - Q1\n\nupper_limit = Q3 + 1.5 * IQR\ndf_without_outliers = df[df['price_num'] &lt;= upper_limit]\n\nbins = [0, 50, 100, 150, 200, 250, 300]\nlabels = ['0-50', '50-100', '100-150', '150-200', '200-250', '250-300']\ndf_without_outliers['price_range'] = pd.cut(df_without_outliers['price_num'], bins=bins, labels=labels, right=False)\n\naverage_rating_by_price_range = df_without_outliers.groupby('price_range')['average_review_score'].mean().reset_index()\n\ndef plot_relationship_between_price_and_review():\n    plt.figure(figsize=(7, 5))\n    sns.regplot(x='price_num', y='average_review_score', data=df_without_outliers, scatter_kws={'alpha':0.5}, color=\"pink\", line_kws={'color': 'lightblue'})\n    plt.title('Relationship between Price and Average Review Score (Without Outliers)', fontsize=18)\n    plt.xlabel('Price ($)', fontsize=14)\n    plt.ylabel('Average Review Score', fontsize=14)\n    plt.grid(True, axis='y')\n    plt.show()\n\ndef plot_average_review_by_price_range():\n    plt.figure(figsize=(7, 5))\n    barplot = sns.barplot(x='price_range', y='average_review_score', data=average_rating_by_price_range, palette='viridis')\n    plt.title('Average Review Score by Price Range', fontsize=18)\n    plt.xlabel('Price Range ($)', fontsize=14)\n    plt.ylabel('Average Review Score', fontsize=14)\n\n    for p in barplot.patches:\n        barplot.annotate(format(p.get_height(), '.2f'), \n                         (p.get_x() + p.get_width() / 2., p.get_height()), \n                         ha='center', va='center', \n                         xytext=(0, 9), \n                         textcoords='offset points')\n    \n    plt.grid(True, axis='y')\n    plt.show()\n\nplot_relationship_between_price_and_review()\nplot_average_review_by_price_range()\n\n\n\n\n\n\n\n\nThe regression analysis indicates a positive correlation between price and review scores, suggesting that higher priced listings generally receive higher ratings. Here’s a detailed look at the average ratings across different price ranges:\n\n$0-50: Average Rating: 4.57\n$50-100: Average Rating: 4.76\n$100-150: Average Rating: 4.78\n$150-200: Average Rating: 4.80\n$200-250: Average Rating: 4.77\n$250-300: Average Rating: 4.80\nHigher priced listings, particularly those above $150 tend to have slightly better average ratings, which might reflect a higher level of service or better accommodation quality that satisfies higher paying guests.\n\n\n\nHosts’ Number of Airbnbs vs. Review Scores and Number of Reviews vs. Review Scores\nThis part is aim to explores how the number of listings a host manages affects their review scores, as well as the relationship between the number of reviews a listing has and its review scores. This helps to understand whether managing more properties impacts the quality of guest experience and if more reviews correlate with higher ratings.\n\n\nCode\ndef plot_host_listings_vs_rating():\n    plt.figure(figsize=(7, 5))\n    sns.regplot(x='calculated_host_listings_count', y='average_review_score', data=df, color=\"pink\",\n                scatter_kws={'alpha':0.6}, line_kws={'color': 'lightblue'})\n    plt.title(\"Relationship between Host's Airbnb Number and Average Rating (Modified)\", fontsize=18)\n    plt.xlabel('Number of Listings (Host\\'s Airbnb Number)', fontsize=14)\n    plt.ylabel('Average Review Score', fontsize=14)\n    plt.grid(True)\n    plt.show()\n\ndef plot_number_of_reviews_vs_review_scores():\n    plt.figure(figsize=(7, 5))\n    sns.regplot(x='number_of_reviews', y='review_scores_rating', data=df, color=\"pink\",\n                scatter_kws={'alpha':0.9}, line_kws={'color': 'lightblue'})\n    plt.title('Relationship between Number of Reviews and Review Scores', fontsize=18)\n    plt.xlabel('Number of Reviews', fontsize=14)\n    plt.ylabel('Review Scores Rating', fontsize=14)\n    plt.grid(True)\n    plt.show()\n\n# Call the plotting functions\nplot_host_listings_vs_rating()\nplot_number_of_reviews_vs_review_scores()\n\n\n\n\n\n\n\n\n\nHost’s Airbnb Number vs. Average Rating: The regression analysis shows a slight negative trend, suggesting that hosts with more listings may have slightly lower average review scores. This could imply challenges in maintaining quality and personalized service across multiple properties.\nNumber of Reviews vs. Review Scores: There is a positive correlation observed here, indicating that listings with more reviews tend to have higher review scores. This may be due to the fact that better established listings accumulate more positive feedback over time.\nThese insights are valuable for both hosts aiming to optimize their hosting strategies and guests looking for the best possible rental experiences.\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "viz_j.html",
    "href": "viz_j.html",
    "title": "Radar Chart Visualizing Airbnb Listing Metrics Across Washington D.C. Neighborhoods",
    "section": "",
    "text": "Radar Chart Visualizing Airbnb Listing Metrics Across Washington D.C. Neighborhoods\n\n\n\nRadar Chart Visualizing Airbnb Listing Metrics Across Washington D.C. Neighborhoods\n\n\nThis radar chart offers a comprehensive visualization of key metrics for Airbnb listings distributed across various neighborhoods in Washington D.C. It tracks several metrics such as review scores (specifically rating, location, and cleanliness), the calculated number of listings per host, average price per night, and host acceptance rate. Each neighborhood is differentiated by a unique colored line, making it easy to compare these aspects side-by-side. This visualization helps in analyzing the performance and attractiveness of Airbnb listings in different parts of the city.\n\n\nDistribution of Airbnb Review Scores and Listing Types\n\n\n\nDistribution of Airbnb Review Scores and Listing Types\n\n\nThis image is divided into two main parts. The first chart shows a histogram that represents the distribution of the total number of reviews received by different types of Airbnb listings, including private rooms, entire homes/apartments, shared rooms, and hotel rooms. The second chart, a box plot, illustrates the distribution of review scores for each listing type, indicating median values, quartiles, and outliers. This comparison sheds light on guest preferences and satisfaction levels across various types of accommodations offered on Airbnb.\n\n\nTop 10 Airbnb Hosts with the Most Listings in Washington D.C.\n\n\n\nTop 10 Airbnb Hosts with the Most Listings in Washington D.C.\n\n\nThis bar chart provides a clear visualization of the top 10 Airbnb hosts in Washington D.C. with the most listings. It is designed to show the concentration of listings among these hosts, which may indicate trends of commercial-scale operations. The x-axis quantifies the number of listings, while the y-axis features host names or identifiers, marked with bars of varying lengths. This chart helps to identify major players in the local Airbnb market and can be used to study the impact of high-volume hosts on the rental landscape.\n\n\n\n\n Back to top"
  }
]